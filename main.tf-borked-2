terraform {
  required_providers {
    coder = {
      source = "coder/coder"
    }
    kubernetes = {
      source = "hashicorp/kubernetes"
    }
  }
}

module "coder-logout" {
  count               = data.coder_workspace.me.start_count
  source              = "./modules/coder-logout"
#  version             = "1.0.23"
  agent_id = coder_agent.main.id
}

module "coder-login" {
  count    = data.coder_workspace.me.start_count
  source   = "registry.coder.com/coder/coder-login/coder"
  version  = "1.0.15"
  agent_id = coder_agent.main.id
}


module "jetbrains_gateway" {
  count          = data.coder_workspace.me.start_count
  source         = "registry.coder.com/modules/jetbrains-gateway/coder"
  version        = "1.0.28"
  agent_id       = coder_agent.main.id
  folder         = "/home/coder"
  jetbrains_ides = ["CL", "GO", "IU", "PY", "WS"]
  default        = "GO"
}

module "filebrowser" {
  count    = data.coder_workspace.me.start_count
  source   = "registry.coder.com/modules/filebrowser/coder"
  version  = "1.0.23"
  agent_id = coder_agent.main.id
}


provider "coder" {
}

# Prompt the user for the git repo URL
data "coder_parameter" "git_repo" {
  name         = "git_repo"
  display_name = "Git repository"
  default      = "https://github.com/bjornrobertsson/shallow"
}

# Clone the repository for branch `feat/example`
module "git_clone" {
  count    = data.coder_workspace.me.start_count
  source   = "registry.coder.com/coder/git-clone/coder"
  version  = "1.0.18"
  agent_id = coder_agent.main.id
  url      = data.coder_parameter.git_repo.value
  base_dir = "~/src/server"
}



variable "use_kubeconfig" {
  type        = bool
  description = <<-EOF
  Use host kubeconfig? (true/false)

  Set this to false if the Coder host is itself running as a Pod on the same
  Kubernetes cluster as you are deploying workspaces to.

  Set this to true if the Coder host is running outside the Kubernetes cluster
  for workspaces.  A valid "~/.kube/config" must be present on the Coder host.
  EOF
  default     = false
}

variable "namespace" {
  type        = string
  description = "The Kubernetes namespace to create workspaces in (must exist prior to creating workspaces). If the Coder host is itself running as a Pod on the same Kubernetes cluster as you are deploying workspaces to, set this to the same namespace."
  default = "coder"
  # sensitive = true
}

data "coder_parameter" "cpu" {
  name         = "cpu"
  display_name = "CPU"
  description  = "The number of CPU cores"
  default      = "2"
  icon         = "/icon/memory.svg"
  mutable      = true
  option {
    name  = "2 Cores"
    value = "2"
  }
  option {
    name  = "4 Cores"
    value = "4"
  }
  option {
    name  = "6 Cores"
    value = "6"
  }
  option {
    name  = "8 Cores"
    value = "8"
  }
}

data "coder_parameter" "memory" {
  name         = "memory"
  display_name = "Memory"
  description  = "The amount of memory in GB"
  default      = "2"
  icon         = "/icon/memory.svg"
  mutable      = true
  option {
    name  = "2 GB"
    value = "2"
  }
  option {
    name  = "4 GB"
    value = "4"
  }
  option {
    name  = "6 GB"
    value = "6"
  }
  option {
    name  = "8 GB"
    value = "8"
  }
}

data "coder_parameter" "home_disk_size" {
  name         = "home_disk_size"
  display_name = "Home disk size"
  description  = "The size of the home disk in GB"
  default      = "10"
  type         = "number"
  icon         = "/emojis/1f4be.png"
  mutable      = false
  validation {
    min = 1
    max = 99999
  }
}

data "coder_parameter" "namespace" {
  name = "Coder Namespace"
  default = var.namespace
  mutable = false
}

provider "kubernetes" {
  # Authenticate via ~/.kube/config or a Coder-specific ServiceAccount, depending on admin preferences
  config_path = var.use_kubeconfig == true ? "~/.kube/config" : null
}

data "coder_workspace" "me" {}
data "coder_workspace_owner" "me" {}

resource "coder_agent" "main" {
  os             = "linux"
  arch           = "amd64"
  startup_script = <<-EOT
      set -e

      # 
      echo "data.coder_workspace_ownder.me.id value is :  ${data.coder_workspace_owner.me.id}"

      # Install the latest code-server.
      # Append "--version x.x.x" to install a specific version of code-server.
      curl -fsSL https://code-server.dev/install.sh | sh -s -- --method=standalone --prefix=/tmp/code-server
      # From the Coder extension marketplace
      /tmp/code-server/bin/code-server --install-extension ms-toolsai.jupyter

      # Start code-server in the background.
      /tmp/code-server/bin/code-server --auth none --port 13337 >/tmp/code-server.log 2>&1 &

      # Export token environment variable (injected by Terraform)
      export CODER_SESSION_TOKEN="${data.coder_workspace_owner.me.session_token}"
      echo "CODER_SESSION_TOKEN: $${CODER_SESSION_TOKEN}"
      TOKEN=$${CODER_SESSION_TOKEN}
      # Print token for debugging (don't do this in production!)
      echo "DEBUG: Using token: $${TOKEN}"

      # Store environment variables for authentication
      echo "CODER_AGENT_TOKEN=$${CODER_AGENT_TOKEN}" > /home/coder/.cache/coder/auth_tokens
      echo "CODER_SESSION_TOKEN=$${CODER_SESSION_TOKEN}" >> /home/coder/.cache/coder/auth_tokens

      # Set Coder URL
      CODER_URL="$${CODER_URL:-https://rcoder.sal.za.net}"
      echo "Using Coder URL: $${CODER_URL}"
      echo "----------------------------------------"

      # Get workspace organization ID
      if [ -n "$${CODER_WORKSPACE_NAME}" ]; then
        echo "Workspace: $${CODER_WORKSPACE_NAME}"

        WORKSPACE_ORG_ID=$(curl -s -X GET "$${CODER_URL}/api/v2/users/me/workspace/$${CODER_WORKSPACE_NAME}" \
          -H 'Accept: application/json' \
          -H "Coder-Session-Token: $${TOKEN}" | jq -r '.latest_build.job.organization_id')

        if [ "$${WORKSPACE_ORG_ID}" != "null" ]; then
          echo "Workspace Org ID: $${WORKSPACE_ORG_ID}"
        fi
        echo "----------------------------------------"
      fi

      # Get user info
      USER_INFO=$(curl -s -X GET "$${CODER_URL}/api/v2/users/me" \
        -H 'Accept: application/json' \
        -H "Coder-Session-Token: $${TOKEN}")

      USERNAME=$(echo "$${USER_INFO}" | jq -r '.username')
      NAME=$(echo "$${USER_INFO}" | jq -r '.name')
      EMAIL=$(echo "$${USER_INFO}" | jq -r '.email')
      USER_ID=$(echo "$${USER_INFO}" | jq -r '.id')

      echo "User Info:"
      echo "Username: $${USERNAME}"
      echo "Name: $${NAME}"
      echo "Email: $${EMAIL}"
      echo "ID: $${USER_ID}"
      echo

      # Get the specific organization for this workspace template
      if [ -n "$${WORKSPACE_ORG_ID}" ] && [ "$${WORKSPACE_ORG_ID}" != "null" ]; then
        ORG_INFO=$(curl -s -X GET "$${CODER_URL}/api/v2/organizations/$${WORKSPACE_ORG_ID}" \
          -H 'Accept: application/json' \
          -H "Coder-Session-Token: $${TOKEN}")

        if [ -n "$${ORG_INFO}" ]; then
          ORG_NAME=$(echo "$${ORG_INFO}" | jq -r '.name')
          ORG_DISPLAY=$(echo "$${ORG_INFO}" | jq -r '.display_name')
          
          if [ "$${ORG_DISPLAY}" != "null" ] && [ -n "$${ORG_DISPLAY}" ]; then
            ORG_FULL="$${ORG_NAME} ($${ORG_DISPLAY})"
          else
            ORG_FULL="$${ORG_NAME}"
          fi

          echo "Template Organization:"
          echo "| Username | Name | Email | Organization | Org ID |"
          echo "|----------|------|-------|--------------|--------|"
          printf "| %-8s | %-4s | %-5s | %-12s | %-7s |\n" \
            "$${USERNAME}" "$${NAME}" "$${EMAIL}" "$${ORG_FULL}" "$${WORKSPACE_ORG_ID}"
        else
          echo "Could not retrieve organization information for ID: $${WORKSPACE_ORG_ID}"
        fi
      else
        echo "No workspace organization ID found"
      fi
      echo "Storing GitHub token"
      coder external-auth access-token GH > ~/.cache/coder/github_token
      echo "Storing a temporary token *defaults to 24hours*"
      coder tokens rm logout_token
      coder tokens create -n logout_token  > /tmp/logout_token
      echo "New token: $(cat /tmp/logout_token)"

  EOT


  # The following metadata blocks are optional. They are used to display
  # information about your workspace in the dashboard. You can remove them
  # if you don't want to display any information.
  # For basic resources, you can use the `coder stat` command.
  # If you need more control, you can write your own script.
  metadata {
    display_name = "CPU Usage"
    key          = "0_cpu_usage"
    script       = "coder stat cpu"
    interval     = 10
    timeout      = 1
  }

  metadata {
    display_name = "RAM Usage"
    key          = "1_ram_usage"
    script       = "coder stat mem"
    interval     = 10
    timeout      = 1
  }

  metadata {
    display_name = "Home Disk"
    key          = "3_home_disk"
    script       = "coder stat disk --path $${HOME}"
    interval     = 60
    timeout      = 1
  }

  metadata {
    display_name = "CPU Usage (Host)"
    key          = "4_cpu_usage_host"
    script       = "coder stat cpu --host"
    interval     = 10
    timeout      = 1
  }

  metadata {
    display_name = "Memory Usage (Host)"
    key          = "5_mem_usage_host"
    script       = "coder stat mem --host"
    interval     = 10
    timeout      = 1
  }

  metadata {
    display_name = "Load Average (Host)"
    key          = "6_load_host"
    # get load avg scaled by number of cores
    script   = <<EOT
      echo "`cat /proc/loadavg | awk '{ print $1 }'` `nproc`" | awk '{ printf "%0.2f", $1/$2 }'
    EOT
    interval = 60
    timeout  = 1
  }
}

# code-server
resource "coder_app" "code-server" {
  agent_id     = coder_agent.main.id
  slug         = "code-server"
  display_name = "code-server"
  icon         = "/icon/code.svg"
  url          = "http://localhost:13337?folder=/home/coder"
  subdomain    = true
  share        = "owner"

  healthcheck {
    url       = "http://localhost:13337/healthz"
    interval  = 3
    threshold = 10
  }
}

resource "kubernetes_persistent_volume_claim" "home" {
  metadata {
    name      = "coder-${data.coder_workspace.me.id}-home"
    namespace = var.namespace
    labels = {
      "app.kubernetes.io/name"     = "coder-pvc"
      "app.kubernetes.io/instance" = "coder-pvc-${data.coder_workspace.me.id}"
      "app.kubernetes.io/part-of"  = "coder"
      //Coder-specific labels.
      "com.coder.resource"       = "true"
      "com.coder.workspace.id"   = data.coder_workspace.me.id
      "com.coder.workspace.name" = data.coder_workspace.me.name
      "com.coder.user.id"        = data.coder_workspace_owner.me.id
      "com.coder.user.username"  = data.coder_workspace_owner.me.name
    }
    annotations = {
      "com.coder.user.email" = data.coder_workspace_owner.me.email
    }

  }
  wait_until_bound = false
  spec {
    access_modes = ["ReadWriteOnce"]
    resources {
      requests = {
        storage = "${data.coder_parameter.home_disk_size.value}Gi"
      }
    }
#    storage_class_name = "nfs-client"
#    storage_class_name = "longhorn"
    storage_class_name = "truenas-iscsi-nonroot"

  }
}

resource "kubernetes_deployment" "main" {
  count = data.coder_workspace.me.start_count
  depends_on = [
    kubernetes_persistent_volume_claim.home
  ]
  wait_for_rollout = false
  metadata {
    name      = "coder-${data.coder_workspace.me.id}"
    namespace = var.namespace
    labels = {
      "app.kubernetes.io/name"     = "coder-workspace"
      "app.kubernetes.io/instance" = "coder-workspace-${data.coder_workspace.me.id}"
      "app.kubernetes.io/part-of"  = "coder"
      "com.coder.resource"         = "true"
      "com.coder.workspace.id"     = data.coder_workspace.me.id
      "com.coder.workspace.name"   = data.coder_workspace.me.name
      "com.coder.user.id"          = data.coder_workspace_owner.me.id
      "com.coder.user.username"    = data.coder_workspace_owner.me.name
    }
    annotations = {
      "com.coder.user.email" = data.coder_workspace_owner.me.email
    }
  }

  spec {
    replicas = 1
    selector {
      match_labels = {
        "app.kubernetes.io/name"     = "coder-workspace"
        "app.kubernetes.io/instance" = "coder-workspace-${data.coder_workspace.me.id}"
        "app.kubernetes.io/part-of"  = "coder"
        "com.coder.resource"         = "true"
        "com.coder.workspace.id"     = data.coder_workspace.me.id
        "com.coder.workspace.name"   = data.coder_workspace.me.name
        "com.coder.user.id"          = data.coder_workspace_owner.me.id
        "com.coder.user.username"    = data.coder_workspace_owner.me.name
      }
    }
    strategy {
      type = "Recreate"
    }

    template {
      metadata {
        labels = {
          "app.kubernetes.io/name"     = "coder-workspace"
          "app.kubernetes.io/instance" = "coder-workspace-${data.coder_workspace.me.id}"
          "app.kubernetes.io/part-of"  = "coder"
          "com.coder.resource"         = "true"
          "com.coder.workspace.id"     = data.coder_workspace.me.id
          "com.coder.workspace.name"   = data.coder_workspace.me.name
          "com.coder.user.id"          = data.coder_workspace_owner.me.id
          "com.coder.user.username"    = data.coder_workspace_owner.me.name
        }
      }
      spec {
        toleration {
          key      = "nvidia.com/gpu.present"
          operator = "Exists"
          effect   = "NoSchedule"
        }
        node_selector = {
          "nvidia.com/gpu.present" = "false"  # Adjust based on your cluster labels
        }

        security_context {
          run_as_user = 1000
          fs_group    = 1000
        }

        init_container {
          name              = "controller"
          image             = "ubuntu"
          image_pull_policy = "Always"
          command           = ["sh", "-c", "${local.controller_init_script}"]
        }



        container {
          name              = "dev"
          image             = "codercom/enterprise-base:ubuntu"
          image_pull_policy = "Always"
          command           = ["sh", "-c", coder_agent.main.init_script]
          security_context {
            run_as_user = "1000"
          }
          env {
            name  = "CODER_AGENT_TOKEN"
            value = coder_agent.main.token
          }
          resources {
            requests = {
              "cpu"    = "250m"
              "memory" = "512Mi"
            }
            limits = {
              "cpu"    = "${data.coder_parameter.cpu.value}"
              "memory" = "${data.coder_parameter.memory.value}Gi"
            }
          }
          volume_mount {
            mount_path = "/home/coder"
            name       = "home"
            read_only  = false
          }
        }

        volume {
          name = "home"
          persistent_volume_claim {
            claim_name = kubernetes_persistent_volume_claim.home.metadata.0.name
            read_only  = false
          }
        }

        affinity {
          // This affinity attempts to spread out all workspace pods evenly across
          // nodes.
          pod_anti_affinity {
            preferred_during_scheduling_ignored_during_execution {
              weight = 1
              pod_affinity_term {
                topology_key = "kubernetes.io/hostname"
                label_selector {
                  match_expressions {
                    key      = "app.kubernetes.io/name"
                    operator = "In"
                    values   = ["coder-workspace"]
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

locals {
  controller_init_script = <<-EOT
    echo "Running controller init container"
    echo "Namespace: ${var.namespace}"
    echo "Workspace ID: ${data.coder_workspace.me.id}"
    echo "Workspace Name: ${data.coder_workspace.me.name}"
    echo "Owner Email: ${data.coder_workspace_owner.me.email}"
    # Add any logic you want to test
    sleep 5
    echo "Controller init done"
  EOT
}

resource "coder_script" "shutdown_script" {
  agent_id     = coder_agent.main.id
  display_name = "Git Unshallow Script"
  icon         = "/icon/git.svg"
  run_on_stop  = true
  
  script = <<-EOT
   #!/usr/bin/bash
   set -x
   set +e
   echo "Starting shutdown script..."
   echo "Starting shutdown $(date +%H:%M)" >> /home/coder/logger.txt

   cd /home/coder
   # Find the latest coder binary
   coder=$(find /tmp/coder.* -name coder -printf "%T+ %p\n" 2>/dev/null | sort -r | head -n 1 | cut -d' ' -f2)

   # Try to log in with CODER_USER_TOKEN
   if ! $${coder} login --token="$${CODER_USER_TOKEN}" --url="$${CODER_AGENT_URL}" ; then
     # Fallback to logout_token if first login fails
     $${coder} login --token="$(cat /tmp/logout_token)" --url="$${CODER_AGENT_URL}" >> /home/coder/logger.txt
     echo "Failed USER_TOKEN login, but completed with logout_token" >> /home/coder/logger.txt
     # Log running Workspaces
     # $${coder} list | tee -a /home/coder/logger.txt
     # echo "^^^ Should have a list of Workspaces here" >> /home/coder/logger.txt
   fi

   echo "Passed the authentication using session or stored logout_token" >> /home/coder/logger.txt
   export GITHUB_TOKEN=$(cat /home/coder/.cache/coder/github_token)
   echo "Using cached GH token 1" >>  /home/coder/logger.txt
   echo "Using cached GH token 2" | tee -a  /home/coder/logger.txt
   echo "Using cached GH token 3" >> /home/coder/logger.txt

   # Step 1: Check if src/server/shallow exists
   if ! cd src/server/shallow  ; then
     echo "Directory src/server/shallow exists. We are in $(pwd)." | tee -a /home/coder/logger.txt
   else
     # Step 2: Move into the directory
     # cd src/server/shallow || { echo "Failed to enter src/server/shallow directory."; exit 1; }
     # Step 3: Check if it's a Git repo
     if ! stat .git ; then
       echo ".git is not present" | tee -a /home/coder/logger.txt
     else
       echo "src/server/shallow is a Git repository."
       echo "Logging the last commit, $(date +%H:%M)" >> /home/coder/logger.txt
       git show --pretty="" --name-only >> /home/coder/logger.txt
     fi
     echo "Will now unshallow" >> /home/coder/logger.txt
   fi
   echo "Moving to unshallow" | tee -a /home/coder/logger.txt

   # Step 4: Check if the repository is a shallow clone
   CHECK=$( git rev-parse --is-shallow-repository )
   # This crashes :
   if git rev-parse --is-shallow-repository ; then
     echo "[INFO] Repository is a shallow clone. Attempting to unshallow..." | tee -a /home/coder/logger.txt

     # Source auth tokens
     echo "Sourcing the auth tokens and attempting to login to Coder prior to running Git commands:
     . /home/coder/.cache/coder/auth_tokens
     $${coder} login --token="$(cat /tmp/logout_token)" --url="$${CODER_AGENT_URL}" >> /home/coder/logger.txt

     if git fetch --unshallow; then
       echo "[SUCCESS] Repository has been unshallowed successfully."
     else
       echo "[ERROR] Failed to unshallow the repository."
     fi
   else
     echo "Repository is not a shallow clone. No action needed." | tee -a /home/coder/logger.txt
     echo "Not a shallow clone $(date +%H:%M)" >> /home/coder/logger.txt
     echo "Making GIT executions - CODER TOKEN: $${CODER_AGENT_TOKEN}" >> /home/coder/logger.txt

     # Generate random filename
     filename="$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 8).rand"

     # Create the file
     cp test2.py "$filename"

     . /home/coder/.cache/coder/auth_tokens
     $${coder} login --token="$(cat /tmp/logout_token)" --url="$${CODER_AGENT_URL}" >> /home/coder/logger.txt

     # Add, commit, and push
     git add "$filename" >> /home/coder/logger.txt 2>&1
     git commit -m "$filename"  >> /home/coder/logger.txt 2>&1
     git push >> /home/coder/logger.txt 2>&1
   fi
   echo "Directory src/server/shallow does not exist. No action taken." | tee -a /home/coder/logger.txt
   echo "Shutdown script completed." | tee -a /home/coder/logger.txt
  EOT
}


resource "coder_script" "startup_auth" {
  agent_id     = coder_agent.main.id
  display_name = "Cache GitHub Token"
  run_on_start = true
  
  script = <<-EOT
    #!/bin/bash
    # Cache the GitHub token during startup when auth is available
    mkdir -p ~/.cache/coder
    coder external-auth access-token GH > ~/.cache/coder/github_token
    chmod 600 ~/.cache/coder/github_token
  EOT
}

